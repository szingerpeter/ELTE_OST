version: "3"
services:
  
  zookeeper:
    image: zookeeper:latest
    restart: "on-failure:3"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    restart: "on-failure:3"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kafka-logs/broker1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: "test:1:1,influxdb:1:1,clustering:1:1"

  data_ingestion:
    build:
      context: ./data_ingestion
      dockerfile: Dockerfile
    restart: "on-failure:3"
    depends_on:
      - kafka
    ports:
      - "4040:4040"
    volumes:
      - "./data_ingestion/data:/opt/app/mounted_data/:ro"
    command: tail -F /dev/null
  clustering:
    build: 
      context: ./clustering
      dockerfile: Dockerfile
    depends_on: 
      - kafka
      - data_ingestion
      - jobmanager
    volumes:
      - ./clustering/conf:/opt/flink/conf

  jobmanager:
    image: flink:1.12
    command: "jobmanager.sh start-foreground"
    volumes:
      - ./clustering/conf:/opt/flink/conf
    ports:
      - 8081:8081
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

  taskmanager:
    image: flink:1.12
    volumes:
      - ./clustering/conf:/opt/flink/conf
    depends_on:
      - jobmanager
    command: "taskmanager.sh start-foreground"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
  forecasting:
    build:
      context: ./forecasting
      dockerfile: Dockerfile
    ports:
      - 5000:5000
      - 3003:3003
    expose:
      - "5000"
      - "3003"
    command: tail -F /dev/null
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 9000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-simple-json-datasource
  cassandra:
    build:
      context: ./cassandra
      dockerfile: Dockerfile
    restart: "on-failure:3"
    expose:
      - "9042"
    environment:
      CASSANDRA_KEYSPACE: test
  save_measurements:
    build:
      context: ./save_measurements
      dockerfile: Dockerfile
    restart: "on-failure:3"
    ports:
      - "4041:4040"
    depends_on:
      - kafka
      - cassandra
      - data_ingestion
<<<<<<< HEAD
  anomaly_detection:
    build:
      context: ./anomaly_detection
      dockerfile: Dockerfile
    ports:
      - "6000:6000"
#      - 3003:3003
    expose:
#      - "5000"
      - "6001"
    command: tail -F /dev/null
=======
  influxdb:
    build:
      context: ./influxdb
      dockerfile: Dockerfile
    volumes:
      - ./influxdb/resources/data:/var/lib/influxdb
      - ./influxdb/resources/config/:/etc/influxdb/
    ports:
      - "8086:8086"
      - "8082:8082"
  kafka_influx_connector:
    build:
      context: ./kafka_influxdb_connector
      dockerfile: Dockerfile
>>>>>>> master

  batch_processing:
    build:
      context: ./batch_processing
      dockerfile: Dockerfile
    restart: "on-failure:3"
    depends_on:
      - kafka
      - cassandra
      - save_measurements
